#           _
#   ___ ___| |__  _ __ ___
#  /_  / __| '_ \| '__/ __|
#   / /\__ \ | | | | | (__
#  /_,_|___/_| |_|_|  \___|
#

#--------------------#
# Bootstraping
#--------------------#

# If not running interactively, don't do anything.
if [[ $- != *i* ]] ; then
    return
fi

#--------------------#
# Basic setup
#--------------------#

# I prefer less to more.
export PAGER=less
export MANPAGER=less

# I prefer to set both EDITOR and VISUAL to Vim or Neovim.
export EDITOR=vim
export VISUAL=vim

# Don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# For setting history length see HISTSIZE and HISTFILESIZE in bash(1).
HISTSIZE=10000
HISTFILESIZE=2000


# Uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [[ -n $force_color_prompt ]]; then
    if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
            color_prompt=yes
    else
            color_prompt=
    fi
fi

git_prompt() {
 ref=$(git symbolic-ref HEAD | cut -d'/' -f3)
 echo $ref
}

## Simple no color commands
#PROMPT=$'%n@%m %~ $ '
#PROMPT=$'┌─[● %m]─[%n]─[%~]─[%T]: $\n└─╼ >> '

## Old prompts
#PROMPT=$'\e[01;31m%n\e[0m\e[01;33m@\e[0m\e[01;36m%M\e[0m \e[01;33m%~\e[0m \e[01;35m$\e[0m '
#PROMPT=$'\e[0;34m\┌─[\e[1;33m● %M\e[0;34m]─[\e[1;36m%n\e[0;34m]─[\e[1;37m%~:'$(git_prompt)%$']\e[0;34m]─[\e[1;33m%T\e[0;34m\]\e[0m: $\n\e[0;34m└─╼ \e[1;35m>> \e[00;00m'

autoload -U colors && colors
#PROMPT="%{$fg_bold[red]%}%n%{$reset_color%}%{$fg_bold[yellow]%}@%{$reset_color%}%{$fg_bold[blue]%}%m%{$reset_color%} %{$fg_bold[yellow]%}%~ %{$reset_color%}%$ "
PROMPT="┌─[%{$fg_bold[yellow]%}● %m%{$reset_color%}]─[%{$fg_bold[blue]%}%n%{$reset_color%}]─[%{$fg_bold[white]%}%~%{$reset_color%}]─[%{$fg_bold[yellow]%}%T%{$reset_color%}]: %$"$'\n'"└─╼ %{$fg_bold[magenta]%}>> %{$reset_color%} "


# Uncomment if you want to try an advanced prompt.
#--------------------#
# Plugins
#--------------------#

if [[ -d '~/.aliases' ]]; then
	source ~/.aliases
fi

# added by travis gem
[ ! -s /home/zaryob/.travis/travis.sh ] || source /home/zaryob/.travis/travis.sh

#
#-------------------#
#   Keys Binds
#-------------------#
# shift-arrow() {
#   ((REGION_ACTIVE)) || zle set-mark-command
#   zle $1
# }
# shift-left()  shift-arrow backward-char
# shift-right() shift-arrow forward-char
# shift-up()    shift-arrow up-line-or-history
# shift-down()  shift-arrow down-line-or-history
# zle -N shift-left
# zle -N shift-right
# zle -N shift-up
# zle -N shift-down

# bindkey $terminfo[kLFT] shift-left
# bindkey $terminfo[kRIT] shift-right
# bindkey $terminfo[kri]  shift-up
# bindkey $terminfo[kind] shift-down

shift-arrow() {
  ((REGION_ACTIVE)) || zle set-mark-command
  zle $1
}
for key  kcap seq        widget (
    left  LFT $'\e[1;2D' backward-char
    right RIT $'\e[1;2C' forward-char
    up    ri  $'\e[1;2A' up-line-or-history
    down  ind $'\e[1;2B' down-line-or-history
  ) {
  functions[shift-$key]="shift-arrow $widget"
  zle -N shift-$key
  bindkey ${terminfo[k$kcap]-$seq} shift-$key
}

# Home-End-Del Keys fixed
bindkey  "^[[H"   beginning-of-line
bindkey  "^[[F"   end-of-line
bindkey  "^[[3~"  delete-char


